// Generated by IcedCoffeeScript 110.0.0
(function() {
  var Runner, a_json_parse, iced, iutils, make_esc, minimist, usage, util;

  iced = require('iced-runtime-3');

  minimist = require('minimist');

  make_esc = require('iced-error').make_esc;

  iutils = require('iced-utils');

  util = require('util');

  a_json_parse = iutils.util.a_json_parse;

  usage = function() {
    return console.error("usage:\njson [-bcip] [-s <spaces>] [-d <depth>] <path.to.4.your.obj>\n\n  boolean flags:\n    -b -- base64 decode the output (if it's a string)\n    -c -- count the number of items in the array and output that\n    -i -- use inspect rather than JSON.stringify\n    -p -- pretty-print JSON.stringify\n\n  integer flags:\n    -s <space> -- Use the given number of spaces in pretty-print (2 by default)\n    -d <depth> -- only investigate depth levels in inspect (infinity by default)");
  };

  Runner = (function() {
    function Runner(arg) {
      arg;
      this.pretty = false;
      this.b64decode = false;
      this.inspect = false;
      this.depth = null;
      this.spacing = 2;
      this.path = null;
      this.count = false;
    }

    Runner.prototype.parse_argv = function(arg, cb) {
      var argv, err;
      argv = arg.argv;
      argv = minimist(argv, {
        boolean: ["p", "b", "i", "c"]
      });
      if (argv.h) {
        usage();
        err = new Error("usage: shown!");
      } else {
        if (argv.p) {
          this.pretty = true;
        }
        if (argv.b) {
          this.b64decode = true;
        }
        if (argv.i) {
          this.inspect = true;
        }
        if (argv.d != null) {
          this.depth = argv.d;
        }
        if (argv.c) {
          this.count = true;
        }
        if (argv.s != null) {
          this.spacing = argv.s;
        }
        if (argv._.length > 1) {
          err = new Error("only need one arg -- a path to your object -- which is optional");
        } else if (argv._.length === 1) {
          this.path = argv._[0];
        }
      }
      return cb(err);
    };

    Runner.prototype.read_input = function(opts, cb) {
      var bufs, stream;
      bufs = [];
      stream = process.stdin;
      stream.resume();
      stream.on('data', function(buf) {
        return bufs.push(buf);
      });
      return stream.on('end', function() {
        return cb(null, Buffer.concat(bufs));
      });
    };

    Runner.prototype.pick_path = function(arg, cb) {
      var err, i, j, json, len, part, parts;
      json = arg.json;
      err = null;
      if (this.path != null) {
        parts = this.path.split(/\./);
        for (i = j = 0, len = parts.length; j < len; i = ++j) {
          part = parts[i];
          if (json == null) {
            err = new Error("null value at " + (parts.slice(0, i).join(".")));
          } else {
            json = json[part];
          }
        }
      }
      return cb(err, json);
    };

    Runner.prototype.output = function(arg, cb) {
      var json, ret;
      json = arg.json;
      ret = typeof json === 'string' ? this.b64decode ? (new Buffer(json, "base64")).toString('utf8') : json : typeof json === 'object' ? Array.isArray(json) && this.count ? json.length : this.inspect ? util.inspect(json, {
        depth: this.depth
      }) : this.pretty ? JSON.stringify(json, null, this.spacing) : JSON.stringify(json) : typeof json === 'number' ? json.toString('10') : void 0;
      return cb(null, ret);
    };

    Runner.prototype.run = function(opts, cb) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        var buf, esc, json, out;
        return function*() {
          var __iced_deferrals, __iced_deferrals1, __iced_deferrals2, __iced_deferrals3, __iced_deferrals4;
          esc = make_esc(cb, "Runner::run");
          __iced_deferrals = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Runner.run.<anonymous: Runner>",
            filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
          });
          _this.parse_argv(opts, esc(__iced_deferrals.defer({
            lineno: 86
          })));
          if (__iced_deferrals.await_exit()) {
            yield;
          }
          __iced_deferrals1 = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Runner.run.<anonymous: Runner>",
            filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
          });
          _this.read_input(opts, esc(__iced_deferrals1.defer({
            assign_fn: (function() {
              return function() {
                return buf = arguments[0];
              };
            })(),
            lineno: 87
          })));
          if (__iced_deferrals1.await_exit()) {
            yield;
          }
          __iced_deferrals2 = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Runner.run.<anonymous: Runner>",
            filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
          });
          a_json_parse(buf.toString(), esc(__iced_deferrals2.defer({
            assign_fn: (function() {
              return function() {
                return json = arguments[0];
              };
            })(),
            lineno: 88
          })));
          if (__iced_deferrals2.await_exit()) {
            yield;
          }
          __iced_deferrals3 = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Runner.run.<anonymous: Runner>",
            filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
          });
          _this.pick_path({
            json: json
          }, esc(__iced_deferrals3.defer({
            assign_fn: (function() {
              return function() {
                return json = arguments[0];
              };
            })(),
            lineno: 89
          })));
          if (__iced_deferrals3.await_exit()) {
            yield;
          }
          __iced_deferrals4 = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Runner.run.<anonymous: Runner>",
            filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
          });
          _this.output({
            json: json
          }, esc(__iced_deferrals4.defer({
            assign_fn: (function() {
              return function() {
                return out = arguments[0];
              };
            })(),
            lineno: 90
          })));
          if (__iced_deferrals4.await_exit()) {
            yield;
          }
          return cb(null, out);
        };
      })(this)();
      return __iced_it.next();
    };

    return Runner;

  })();

  exports.run = function(cb) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var buf, err, r, rc;
      return function*() {
        var __iced_deferrals, __iced_deferrals1;
        r = new Runner;
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: exports>",
          filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
        });
        r.run({
          argv: process.argv.slice(2)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return buf = arguments[1];
            };
          })(),
          lineno: 97
        }));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        rc = 0;
        if (err != null) {
          rc = 2;
          console.error(err.toString());
        } else {
          __iced_deferrals1 = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "<anonymous: exports>",
            filename: "/Users/max/src/iced/node-json-explorer/src/main.iced"
          });
          process.stdout.write(buf, __iced_deferrals1.defer({
            lineno: 103
          }));
          if (__iced_deferrals1.await_exit()) {
            yield;
          }
        }
        return cb(rc);
      };
    })(this)();
    return __iced_it.next();
  };

}).call(this);
